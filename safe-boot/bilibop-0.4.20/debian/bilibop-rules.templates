
Template: bilibop-rules/on-live-system
Type: boolean
Default: false
_Description: Do you intend to install bilibop-rules on a Live System ?
 Some bilibop-rules settings can be useful on non-volatile Operating Systems,
 when running from a removable and writable media (USB sticks, external HDD
 or SD cards); but they are currently useless or even harmful for LiveCD or
 LiveUSB systems.
 .
 If you choose this option, no other question will be asked; bilibop udev
 rules will be applied but nothing else will be modified on your system.
 Note that in that case, this package is overkill and you should probably
 replace it by the lighter but as much as efficient bilibop-udev package.

Template: bilibop-rules/bilibop_rules_generator/customize
Type: boolean
Default: false
_Description: Do you want to use custom bilibop rules and build them now ?
 If tens of removable media are plugged on the computer your system boots
 from, bilibop udev rules can significantly increase boot time. This can be
 avoided by using custom udev rules, which are specific to the device your
 system is installed on.
 .
 That said, if this device can boot from different hardware port types (as
 USB/Firewire, USB/eSATA, USB/MMC/SD, etc.), you should check the resulting
 rules by booting your system on the alternative port type, and if necessary
 by running 'dpkg-reconfigure bilibop-rules' again with proper options, or
 even by editing '/etc/udev/rules.d/66-bilibop.rules'.

Template: bilibop-rules/bilibop_rules_generator/overwrite
Type: select
__Choices: keep existing custom rules, rebuild custom rules, remove custom rules
Choices-C: keep, rebuild, remove
Default: keep
_Description: What do you want to do with your custom rules ?
 The file '/etc/udev/rules.d/66-bilibop.rules' exists. It is specific to the
 drive on which your system is installed and overrides the one, more generic,
 that is provided by the bilibop-rules package (in '/lib/udev/rules.d').
 .
 If the device hosting the running system is able to boot from different
 hardware port types (USB/Firewire, USB/eSATA, USB/MMC/SD-card, etc.), you
 should boot it from the alternative port type and check if your custom rules
 work fine in all cases. In the doubt, you should remove the custom rules
 file.

Template: bilibop-rules/bilibop_rules_generator/options
Type: string
#flag:translate!:3
_Description: Options to pass to the bilibop rules generator:
 Possible options you can pass to the bilibop rules generator are the
 followings:
 .
  -a vendor,model
  -a manufacturer,product,serial
  -e ID_VENDOR,ID_MODEL,ID_SERIAL_SHORT
  -e ID_SERIAL
 .
 The two first ones cannot be mixed; for example, '-a model,serial' is not a
 valid option; use '-a model -e ID_SERIAL' instead. In the doubt, you should
 probably set it to an empty string (defaults to
 '-a manufacturer,product,serial').

Template: bilibop-rules/bilibop_rules_generator/bad_options
Type: error
_Description: Options given to the bilibop rules generator seem to be invalid.
 You can go back by hitting the <Escape> key and then modify the options.
 Otherwise, the custom rules file '/etc/udev/rules.d/66-bilibop.rules' will
 not be written.

Template: bilibop-rules/belongs_to_floppy_group/custom_rules_error
Type: error
#flag:translate!:2,4
_Description: The following device(s) still belong to floppy group:
 ${DEVICE}
 .
 You should rewrite or remove your custom rules file:
 .
 /etc/udev/rules.d/66-bilibop.rules

Template: bilibop-rules/belongs_to_floppy_group/internal_error
Type: error
#flag:translate!:3
_Description: Internal error
 The following device(s) still belong to floppy group:
 .
 ${DEVICE}
 .
 You should send a bug report to the maintainer of the package.

Template: bilibop-rules/grub_device_map_manager
Type: select
__Choices: the existing one, a static device map (not recommended), a static fake device map, a dynamic fake device map, a dynamically updated device map
Choices-C: keep, static, fake, dynamic, ondemand
Default: keep
_Description: What kind of GRUB device map do you want to use ?
 The '/boot/grub/device.map' file can store obsolete information. In some cases,
 this can lead to failures when the GRUB bootloader menu is updated. To avoid
 that, it is possible to replace the device map by a fake one, mapping only
 the physical drive hosting your system; or by a link to a temporary file,
 which may be created either at boot time with a fake content, or on demand
 with an updated content.
 .
 If your external system is embedded on a device able to boot from different
 hardware port types (USB/Firewire, USB/eSATA, USB/MMC/SD, etc.), it is not
 recommended to use a static device map. The dynamic fake device map should
 work in all cases.

Template: bilibop-rules/make_unpersistent_rules
Type: select
__Choices: keep them in their current state, make unpersistent cd rules only, make unpersistent net rules only, make unpersistent rules for all (recommended), make persistent rules for all
Choices-C: keep, cd, net, all, none
Default: keep
#flag:translate!:3,5
_Description: What persistent rules do you want to make unpersistent ?
 Some udev rules files can store information about components of the computer
 your system is plugged on:
 .
  /etc/udev/rules.d/70-persistent-cd.rules
  /etc/udev/rules.d/70-persistent-net.rules
 .
 These files are cumulative and can store obsolete information, possibly
 leading to unexpected behaviour of your network manager or CD burner
 application. It is possible to replace them by symlinks to temporary files
 to keep them always up to date. Note that it is possible to do or undo that
 at any time by running
 .
  dpkg-reconfigure bilibop-rules

Template: bilibop-rules/physical_volumes_filter/system-only
Type: boolean
Default: false
#flag:translate!:4
_Description: Do you want to hide Physical Volumes your system does not need ?
 It seems that the drive on which your system is installed contains Logical
 Volumes. It is possible to set LVM to activate only the Physical Volumes
 that your system needs. This can mainly avoid name conflicts between the
 Volumes used by your system and those that could be found on internal or
 external drives plugged on the same computer.
 .
 If you choose to use this feature, this will overwrite '/etc/lvm/lvm.conf',
 and you should read 'README.Debian' in the documentation of the package.
 Otherwise, you can do it later with
 .
  dpkg-reconfigure -p low bilibop-rules

Template: bilibop-rules/physical_volumes_filter/filter
Type: string
Description: for internal use only

Template: bilibop-rules/physical_volumes_filter/global_filter
Type: string
Description: for internal use only

Template: bilibop-rules/physical_volumes_filter/obtain_device_list_from_udev
Type: string
Description: for internal use only

Template: bilibop-rules/physical_volumes_filter/without_global_filter/warning
Type: error
#flag:translate!:3,5
_Description: Physical Volumes Filter will not be applied.
 Probably due to an error in '66-bilibop.rules', the following device(s) have
 not been tagged 'BILIBOP' by udev, or have no usable symlink managed by udev:
 .
  ${UNTAGGED}
  ${UNLINKED}
 .
 This means some variables in '/etc/lvm/lvm.conf' will be left or reset to
 their initial values:
 .
  obtain_device_list_from_udev = ${FROMUDEV}
  filter = ${FILTER}

Template: bilibop-rules/physical_volumes_filter/with_global_filter/warning
Type: error
#flag:translate!:3,5
_Description: Physical Volumes Filter will not be applied.
 Probably due to an error in '66-bilibop.rules', the following device(s) have
 not been tagged 'BILIBOP' by udev, or have no usable symlink managed by udev:
 .
  ${UNTAGGED}
  ${UNLINKED}
 .
 This means some variables in '/etc/lvm/lvm.conf' will be left or reset to
 their initial values:
 .
  obtain_device_list_from_udev = ${FROMUDEV}
  filter = ${FILTER}
  global_filter = ${GLOBAL_FILTER}

